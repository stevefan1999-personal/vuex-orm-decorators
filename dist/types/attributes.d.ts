import { Model, Attribute } from '@vuex-orm/core';
import Mutator from '@vuex-orm/core/lib/attributes/contracts/Mutator';
declare type FunctorOrValue<T> = (() => T) | T;
export declare function PrimaryKey(): (target: Object, propertyName: string | symbol) => void;
export declare function Field(fieldTypeFn: () => Attribute): (target: Object, propertyName: string | symbol) => void;
export declare function StringField(defaultValue?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function IncrementField(): (target: Object, propertyName: string | symbol) => void;
export declare function AttrField<T>(defaultValue?: FunctorOrValue<T>): (target: Object, propertyName: string | symbol) => void;
export declare function NumberField(defaultValue?: FunctorOrValue<number>): (target: Object, propertyName: string | symbol) => void;
export declare function BooleanField(value: FunctorOrValue<any>, mutator?: Mutator<boolean | null>): (target: Object, propertyName: string | symbol) => void;
export declare function HasManyField(related: FunctorOrValue<typeof Model | string>, foreignKey: FunctorOrValue<string>, localKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function HasOneField(related: FunctorOrValue<typeof Model | string>, foreignKey: FunctorOrValue<string>, localKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function BelongsToField(parent: FunctorOrValue<typeof Model | string>, foreignKey: FunctorOrValue<string>, ownerKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function HasManyByField(parent: FunctorOrValue<typeof Model | string>, foreignKey: FunctorOrValue<string>, ownerKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function HasManyThroughField(related: FunctorOrValue<typeof Model | string>, through: FunctorOrValue<typeof Model | string>, firstKey: FunctorOrValue<string>, secondKey: FunctorOrValue<string>, localKey?: FunctorOrValue<string>, secondLocalKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function BelongsToManyField(related: FunctorOrValue<typeof Model | string>, pivot: FunctorOrValue<typeof Model | string>, foreignPivotKey: FunctorOrValue<string>, relatedPivotKey: FunctorOrValue<string>, parentKey?: FunctorOrValue<string>, relatedKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function MorphToField(id: FunctorOrValue<string>, type: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function MorphOneField(related: FunctorOrValue<typeof Model | string>, id: FunctorOrValue<string>, type: FunctorOrValue<string>, localKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function MorphManyField(related: FunctorOrValue<typeof Model | string>, id: FunctorOrValue<string>, type: FunctorOrValue<string>, localKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function MorphToManyField(related: FunctorOrValue<typeof Model | string>, pivot: FunctorOrValue<typeof Model | string>, relatedId: FunctorOrValue<string>, id: FunctorOrValue<string>, type: FunctorOrValue<string>, parentKey?: FunctorOrValue<string>, relatedKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export declare function MorphedByManyField(related: FunctorOrValue<typeof Model | string>, pivot: FunctorOrValue<typeof Model | string>, relatedId: FunctorOrValue<string>, id: FunctorOrValue<string>, type: FunctorOrValue<string>, parentKey?: FunctorOrValue<string>, relatedKey?: FunctorOrValue<string>): (target: Object, propertyName: string | symbol) => void;
export {};
