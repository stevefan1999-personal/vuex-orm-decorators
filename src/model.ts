import { Model, Attribute } from '@vuex-orm/core';
import { ORMDatabase } from './database';

/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(
    entityName: string, 
    options: { 
        parentEntity?: string, 
        types?: { [key: string]: typeof Model }, 
        typeKey?: string,
        autoRegister: boolean,
        cacheFields: boolean
    } = {
        autoRegister: false,
        cacheFields: true
    }
) {
    return function <Model extends Function>(constructor: Model): Model | void {
        const model: any = constructor;

        // Set the entity name on the model constructor
        model.entity = entityName;

        // Workaround for undefined database
        if (options.autoRegister) {
            model.database = () => ORMDatabase.ormDatabase
        }

        // Set the parent entity name on the model constructo (if present)
        if (options.parentEntity) { model.baseEntity = options.parentEntity; }

        // Set up the types and descriminator (if set)
        model.types = options.types;
        if (options.types && options.typeKey) { model.typeKey = options.typeKey; }

        // Add the fields generated by tha attribute decorators
        // compose(Object.fromEntries, map(([k, v]) => ([k, v()])), Object.entries)(fieldsFunctors)
        model.fields = () => {
            const populateFields = () => Object.fromEntries(
                Object.entries((model._fields || {}) as Record<string, () => Attribute>)
                    .map(([key, value]) => ([key, value()]))
            )

            if (options.cacheFields) {
                if (!model.__cached_fields) {
                    model.__cached_fields = populateFields()
                }
                return model.__cached_fields
            }

            return populateFields()
        }

        if (options.autoRegister) {
            // Register the entity in the database
            ORMDatabase.registerEntity(model as typeof Model);
        }

        return model as Model;
    };
}