import { Model, Attribute } from '@vuex-orm/core';
import { ORMDatabase } from './database';

/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(entityName: string, parentEntity?: string, types?: { [key: string]: typeof Model }, typeKey?: string) {
    return function <Model extends Function>(constructor: Model): Model | void {
        const model: any = constructor;

        // Set the entity name on the model constructor
        model.entity = entityName;

        // Set the parent entity name on the model constructo (if present)
        if (parentEntity) { model.baseEntity = parentEntity; }

        // Set up the types and descriminator (if set)
        model.types = types;
        if (types && typeKey) { model.typeKey = typeKey; }

        // Add the fields generated by tha attribute decorators
        // compose(Object.fromEntries, map(([k, v]) => ([k, v()])), Object.entries)(fieldsFunctors)
        model.fields = () => Object.fromEntries(
            Object.entries((model._fields || {}) as Record<string, () => Attribute>)
                  .map(([key, value]) => ([key, value()]))
        )

        // Register the entity in the database
        ORMDatabase.registerEntity(model as typeof Model);

        return model as Model;
    };
}